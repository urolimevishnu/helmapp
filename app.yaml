apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: helm-app-git
  namespace: argocd
  annotations:
    argocd-image-updater.argoproj.io/image-list: myalias=gcr.io/test-argo-poc/app #myalias=us-docker.pkg.dev/test-argo-poc/application/app   #Write repository name
    argocd-image-updater.argoproj.io/my-image.pull-secret: pullsecret:argocd/git-original #pullsecret:argocd/argocd-gcr-secret  # You can remove this annotation if you have already configured the gcr secret and are using the same secret to retrieve all GCR images in your deployments.
    argocd-image-updater.argoproj.io/myalias.update-strategy: latest #There are several ways to update the image, but I'm using digest.
    argocd-image-updater.argoproj.io/write-back-method: git:secret:argocd/git-original  # We don't need the secret as mentioned in argocd doc because we already set it up via argocd console if you're using the same git repo.
    argocd-image-updater.argoproj.io/git-branch: main
    argocd-image-updater.argoproj.io/myalias.force-update: "true"

  finalizers:
    - resources-finalizer.argocd.argoproj.io

  labels:
    name: test-application

spec:
  project: default

  source:
    repoURL: git@github.com:urolimevishnu/helmapp.git
    targetRevision: HEAD
    path: dev/app-helm # path of the kubernetes application code means where you stored deployment.yaml, service.yaml etc

      #   helm:
      #     parameters:
      #       - name: "imageId.image"
      #         value: "us-docker.pkg.dev/test-argo-poc/application/app:d9e46aae-54ac-4eca-b73d-93dfa3b694ca"
            #- name: "imageId.tag"
            #value: v0.1.2
  destination:
    server: https://kubernetes.default.svc  # if you want to deploy application in the same cluster where argocd server is running if thats diffrent then use cluster IP address.
    namespace: test-app
  
  syncPolicy:
    syncOptions:
    - CreateNamespace=true
    automated:
      selfHeal: true
      prune: true
